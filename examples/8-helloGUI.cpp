// SPDX-FileCopyrightText: 2022 Dmitrii Shashkov
// SPDX-License-Identifier: MIT

#include "../src/rtengine.h"
#include <math.h>
#pragma comment(lib, "bin/rtengine.lib")

// This enum values will be sent upon button press from gui controller
enum GUI_BUTTON
{
    NONE = 0,
    TOGGLE_JOJO,
    TOGGLE_PELMENI,
    TOGGLE_CRATE,
    TOGGLE_FULLSCREEN,
    QUIT
};

// Note that gui elements could be inhereted from ActorGUIElement
// You still can use ActorPawn to receive input and do all of the logic yourself
class GUIButton : public ActorGUIElement
{
public:
    GUIButton() : ActorGUIElement()
    {
        registerName("Gui Button");
        setActiveArea(200.0f, 48.0f);
        setSelectiveIndex(index++);

        // Component text is just a usual component, but have some functions to setup text parameters
        // Later it renders into texture that will be drawn
        textShadowSprite = createComponent<ComponentText>();
        textShadowSprite->setFont(font);
        textShadowSprite->setText("Unknown Button");
        textShadowSprite->setColor(40, 40, 40);
        textShadowSprite->setOpacity(0.8f);
        textShadowSprite->transform.setPosition(5.0f, -1.0f);

        textSprite = createComponent<ComponentText>();
        textSprite->setFont(font);
        textSprite->setText("Unknown Button");
        textSprite->setColor(170, 170, 170);
    }

    void setText(std::string text)
    {
        textSprite->setText(text);
        textShadowSprite->setText(text);
    }

    void onProcess(float delta)
    {
        ActorGUIElement::onProcess(delta);

        if (bIsHovered)
            counter = fminf(counter + delta * 5.0f, 1.0f);
        if (!bIsHovered)
            counter = fmaxf(counter - delta * 5.0f, 0.0f);

        textSprite->transform.setPosition(0, sinf(counter * CONST_PI / 2.0f) * 8.0f);
    }

    // This event is generated by ActorGUIElement
    // Depends on setActiveArea called in constructor
    void onHover()
    {
        textSprite->setColor(255, 255, 255);
    }

    // This event is generated by ActorGUIElement
    // Depends on setActiveArea called in constructor
    void onBlur()
    {
        textSprite->setColor(170, 170, 170);
    }

    static Font *font;

protected:
    float counter;
    ComponentText *textSprite, *textShadowSprite;
    static int index;
    int color = 170;
};
Font *GUIButton::font = nullptr;
int GUIButton::index = 0;

// Btw, Jojo belongs to it's owner and has no relation to Red Ten Roads
class JoJo : public Actor
{
public:
    JoJo() : Actor()
    {
        registerName("JoJo");
        transform.setScale(0.8);
        transform.setPosition(0.0f, -50.0f);

        sprite = createComponent<ComponentSprite>();
        sprite->setTexture(jojoTexture);
    }

    static Texture *jojoTexture;

protected:
    ComponentSprite *sprite;
};
Texture *JoJo::jojoTexture = nullptr;

class CratePlate : public Actor
{
public:
    CratePlate() : Actor()
    {
        registerName("CratePlate");
        transform.setScale(0.8);
        sprite = createComponent<ComponentSprite>();
    }

    void onProcess(float delta)
    {
        transform.rotate((bIsPlate ? 2.0f : -2.0f) * delta);
    }

    void setAsCrate()
    {
        sprite->setTexture(crateTexture);
        bIsPlate = false;
    }

    void setAsPlate()
    {
        sprite->setTexture(plateTexture);
        bIsPlate = true;
    }

    static Texture *crateTexture;
    static Texture *plateTexture;

protected:
    bool bIsPlate = false;
    ComponentSprite *sprite;
};
Texture *CratePlate::crateTexture = nullptr;
Texture *CratePlate::plateTexture = nullptr;

int main()
{
    // Engine setup
    auto engine = RTEngine::createInstance();

    // View setup
    auto viewController = engine->getViewController();
    auto view = viewController->createView("Example \"8. Hello GUI\"", 1280, 800, false);
    int screenWidth = viewController->getPrimaryScreenWidth();
    int screenHeight = viewController->getPrimaryScreenHeight();

    // Stage setup
    auto stageController = engine->getStageController();
    auto stage = stageController->createStage("Hello GUI");

    // Layers and camera setup
    auto layerActors = stage->createLayerActors("Hello Actor Layer", 0);
    auto camera = layerActors->createActor<CameraOrto>();
    camera->setWidthBasedResolution(1280);

    // In this example we have 2 layers, one is our game happening (for example) and the second for gui
    auto layerGUI = stage->createLayerActors("Hello GUI Layer", 1);
    auto guiCamera = layerGUI->createActor<CameraOrto>();
    guiCamera->setWidthBasedResolution(1280);

    // Textures setup
    auto resourceController = engine->getResourceController();
    JoJo::jojoTexture = resourceController->addTexture("./data/jojo.png");
    auto background = resourceController->addTexture("./data/background.jpg");
    CratePlate::crateTexture = resourceController->addTexture("./data/crate.jpg");
    CratePlate::plateTexture = resourceController->addTexture("./data/plate.png");

    // To create texts we first need to load font
    auto font = resourceController->addFont("./data/BebasNeue-Regular.ttf", 72);
    GUIButton::font = resourceController->addFont("./data/BebasNeue-Regular.ttf", 48);

    // Just a background for better look
    auto backgroundActor = layerActors->createActor<Actor>();
    backgroundActor->transform.setScale(1.5f);
    auto backgroundActorSprite = backgroundActor->createComponent<ComponentSprite>();
    backgroundActorSprite->setTexture(background);

    auto jojo = layerActors->createActor<JoJo>();

    auto plate = layerActors->createActor<CratePlate>();
    plate->setAsPlate();
    plate->transform.setPosition(-400.0f, 0);

    auto crate = layerActors->createActor<CratePlate>();
    crate->setAsCrate();
    crate->transform.setPosition(400.0f, 0);

    // We create a text with 2 components - first shadow of the text and text itself
    std::string headerText = "This is ultimate text gui JoJo tutorial";
    auto header = layerGUI->createActor<Actor>();
    auto textShadow = header->createComponent<ComponentText>();
    textShadow->setFont(font);
    textShadow->setText(headerText);
    textShadow->setColor(255, 255, 255);
    textShadow->setOpacity(1.0f);
    textShadow->transform.setPosition(4.0f, 4.0f);

    auto text = header->createComponent<ComponentText>();
    text->setFont(font);
    text->setText(headerText);
    text->setColor(0, 0, 0);

    header->transform.setPosition(0, 320.0f);

    // Buttons is separate actors, how they work - look in the actor's code
    auto newButton = layerGUI->createActor<GUIButton>();
    newButton->transform.setPosition(0, -60);
    newButton->setPressID(GUI_BUTTON::TOGGLE_FULLSCREEN);
    newButton->setText("Toggle fullscreen");

    newButton = layerGUI->createActor<GUIButton>();
    newButton->transform.setPosition(0, -120);
    newButton->setPressID(GUI_BUTTON::TOGGLE_JOJO);
    newButton->setText("Toggle JoJo");

    newButton = layerGUI->createActor<GUIButton>();
    newButton->transform.setPosition(0, -180);
    newButton->setPressID(GUI_BUTTON::TOGGLE_PELMENI);
    newButton->setText("Toggle pelmeni");

    newButton = layerGUI->createActor<GUIButton>();
    newButton->transform.setPosition(0, -240);
    newButton->setPressID(GUI_BUTTON::TOGGLE_CRATE);
    newButton->setText("Toggle crate");

    newButton = layerGUI->createActor<GUIButton>();
    newButton->transform.setPosition(0, -300);
    newButton->setPressID(GUI_BUTTON::QUIT);
    newButton->setText("Quit");

    while (!engine->isTerminationIntended())
    {
        float delta = engine->syncFrame();
        viewController->processEvents();
        stage->process(delta);
        stage->present(view);

        // here we taking IDs of button pressed and doing corresponding actions
        int firstPressID;
        while ((firstPressID = ActorGUIElement::getFirstPressID()))
        {
            if (firstPressID == GUI_BUTTON::QUIT)
                engine->terminate();

            if (firstPressID == GUI_BUTTON::TOGGLE_JOJO)
                jojo->setVisible(!jojo->isVisible());

            if (firstPressID == GUI_BUTTON::TOGGLE_CRATE)
                crate->setVisible(!crate->isVisible());

            if (firstPressID == GUI_BUTTON::TOGGLE_PELMENI)
                plate->setVisible(!plate->isVisible());

            if (firstPressID == GUI_BUTTON::TOGGLE_FULLSCREEN)
            {
                if (view->isFullscreen())
                    view->changeMode(1280, 800, 0, false);
                else
                    view->changeMode(screenWidth, screenHeight, 0, true);
            }
        }
    }
}